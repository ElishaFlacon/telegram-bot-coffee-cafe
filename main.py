from aiogram import Bot, Dispatcher, executor, types
import logging
from aiogram.types import ReplyKeyboardRemove
from keys import API_TOKEN
from keyboards import *
from verification import *
from session import *
from orders import *


def on_startup():
    print('–ë–û–¢ –ó–ê–ü–£–©–ï–ù!!!')


# –õ–û–ì–ò–ù–ò–ú–°–Ø
logging.basicConfig(level=logging.INFO)

# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –ë–û–¢–ê –ò –î–ò–°–ü–ï–¢–ß–ï–†–ê
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
@dp.message_handler(commands=['start'])
async def start_working(message: types.Message):
    if admin_vefify(message.from_user.id) == True:
        await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}, –≤—ã –ê–î–ú–ò–ù!', reply_markup=None)
    elif worker_vefify(message.from_user.id) == True:
        await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}, –≤—ã —Ö–æ—Ç–∏–µ—Ç –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É?', reply_markup=kb_worker_start_session)
    else:
        await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã –≥–µ–π!')


# –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
@dp.message_handler(commands=['–ù–∞—á–∞—Ç—å_—Å–º–µ–Ω—É'])
async def start_session(message: types.Message):
    # –ï—Å–ª–∏ —É –º—É–∂–∏–∫–∞ —Å–º–µ–Ω–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞
    if worker_vefify(message.from_user.id) == True and worker_session_status(message.from_user.id) == False:
        worker_start_session(message.from_user.id)
        await message.answer(f'{message.from_user.full_name}, –í—ã –Ω–∞—á–∞–ª–∏ —Å–º–µ–Ω—É!', reply_markup=kb_worker_main_menu)
    # –ï—Å–ª–∏ —É –º—É–∂–∏–∫–∞ —Å–º–µ–Ω–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞
    elif worker_vefify(message.from_user.id) == True and worker_session_status(message.from_user.id) == True:
        await message.answer(f'{message.from_user.full_name}, –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—à–ª—É—é —Å–º–µ–Ω—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É', reply_markup=kb_worker_end_session)


# –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.message_handler(commands=['–°–æ–∑–¥–∞—Ç—å_–∑–∞–∫–∞–∑'])
async def create_order(message: types.Message):
    if worker_vefify(message.from_user.id) == True and worker_session_status(message.from_user.id) == True:
        await message.answer(f'–í—ã –Ω–∞—á–∞–ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å –∑–∞–∫–∞–∑ {create_new_order(message.from_user.id)}', reply_markup=kb_worker_create_order)


# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
@dp.message_handler(commands=['–î–æ–±–∞–≤–∏—Ç—å'])
async def add_product_to_order(message: types.Message):
    if worker_vefify(message.from_user.id) == True and worker_session_status(message.from_user.id) == True:
        # #! –¢—É—Ç –≥–æ–≤–Ω–æ –∫–æ–¥, –ø—Ä–æ–≤–µ—Ä–∫b –Ω–∞ —Ç–æ, —á—Ç–æ —á–µ–ª –≤—ã–±—Ä–∞–ª –≤–∫—É—Å –∏ –≤—Å–µ —Ç–∞–∫–æ–µ
        # #! –ò –¥–∞ —è –∑–Ω–∞—é, —á—Ç–æ –º–æ–∂–Ω–æ –±—ã–ª–æ —á–µ—Ä–µ–∑ —Å—Ç–µ–π—Ç –º–∞—à–∏–Ω—ã —Å–¥–µ–ª–∞—Ç
        # #! –ù–æ —è —Ö—É–¥–æ–∂–Ω–∏–∫ —è —Ç–∞–∫ –≤–∏–∂—É, –Ω—É –∏ –º–Ω–µ –ª–µ–Ω—å –±—ã–ª–æ XD
        # for i in message.text.split():
        #     if i.find('_–º–æ—Ä–æ–∂–µ–Ω–æ–µ') == 0:
        #         await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ', parse_mode='html', reply_markup=kb_worker_select_taste_icecream)
        #         for i in message.text.split():
        #             if i.find('_–≤–∫—É—Å_') == 0:
        #                 await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—ã–ø–∫–∏ –¥–ª—è –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ', reply_markup=kb_worker_select_additions_icecream)
        #                 for i in message.text.split():
        #                     if i.find('_–±–µ–∑_–ø–æ—Å—ã–ø–∫–∏') == 0 or i.find('/–ó–∞–≤–µ—Ä—à–∏—Ç—å_–¥–æ–±–æ–≤–ª–µ–Ω–∏–µ_–ø–æ—Å—ã–ø–æ–∫') == 0:
        #                         await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–Ω–≥ –¥–ª—è –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ', reply_markup=kb_worker_select_topping_icecream)
        #                         for i in message.text.split():
        #                             if i.find('_—Ç–æ–ø–∏–Ω–≥_') == 0 or i.find('–±–µ–∑_—Ç–æ–ø–∏–Ω–≥–∞') == 0:
        #                                 await message.answer(reply_markup=kb_worker_create_order)

        append_product_to_order(get_product(
                                message.text), get_count_being_created_order(message.from_user.id))
        await message.answer(f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∑–∞–∫–∞–∑ ‚Ññ{get_count_being_created_order(message.from_user.id)}: <strong>{get_product(message.text)}</strong>', parse_mode='html')


# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
@ dp.message_handler(commands=['–û—Ç–º–µ–Ω–∏—Ç—å_—Å–æ–∑–¥–∞–Ω–∏–µ_–∑–∞–∫–∞–∑–∞'])
async def complete_creating_order(message: types.Message):
    if worker_vefify(message.from_user.id) == True and worker_session_status(message.from_user.id) == True:
        await message.answer(f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ{get_count_being_created_order(message.from_user.id)}. <strong>–ó–∞–∫–∞–∑ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–Ω—ã–º!</strong>', parse_mode='html', reply_markup=kb_worker_main_menu)
        remove_order(get_count_being_created_order(message.from_user.id))


# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
@ dp.message_handler(commands=['–ó–∞–≤–µ—Ä—à–∏—Ç—å_—Å–æ–∑–¥–∞–Ω–∏–µ_–∑–∞–∫–∞–∑–∞'])
async def complete_creating_order(message: types.Message):
    if worker_vefify(message.from_user.id) == True and worker_session_status(message.from_user.id) == True:
        await message.answer(f'–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ{get_count_being_created_order(message.from_user.id)}: <strong>{get_all_products(get_count_being_created_order(message.from_user.id))}</strong>', parse_mode='html', reply_markup=kb_worker_main_menu)
        complete_create_order(
            get_count_being_created_order(message.from_user.id))


# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
@ dp.message_handler(commands=['–¢–µ–∫—É—â–∏–µ_–∑–∞–∫–∞–∑—ã'])
async def check_actua_orders(message: types.Message):
    if worker_vefify(message.from_user.id) == True and worker_session_status(message.from_user.id) == True:
        for i in range(get_count_all_orders()):
            # –ó–∞—á–µ–º i+1? —á—Ç–æ–±—ã –≤–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø–æ–ø–∞–¥–∞–ª–∞, –∏–Ω–∞—á–µ –≤—ã–≤–µ–¥–µ—Ç None
            if check_running_orders(i+1) == True:
                await message.answer(f'–¢–µ–∫—É—â–∏–π –ó–∞–∫–∞–∑ ‚Ññ{i+1}: <strong>{get_all_products(i+1)}</strong>', parse_mode='html', reply_markup=create_inline_keyboard(i+1))


# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
@ dp.message_handler(commands=['–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ_–∑–∞–∫–∞–∑—ã'])
async def check_actua_orders(message: types.Message):
    if worker_vefify(message.from_user.id) == True and worker_session_status(message.from_user.id) == True:
        for i in range(get_count_all_orders()):
            # –ó–∞—á–µ–º i+1? —á—Ç–æ–±—ã –≤–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø–æ–ø–∞–¥–∞–ª–∞, –∏–Ω–∞—á–µ –≤—ã–≤–µ–¥–µ—Ç None
            if check_completed_orders(i+1) == True:
                await message.answer(f'–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ó–∞–∫–∞–∑ ‚Ññ{i+1}: <strong>{get_all_products(i+1)}</strong>', parse_mode='html')


# –¢—É—Ç –±—É–¥—É—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@ dp.callback_query_handler()
async def inline_keyboards_commands(callback: types.CallbackQuery):
    if callback.data.split()[0] == '++':
        await callback.answer(f'üü© –ó–∞–∫–∞–∑ ‚Ññ{callback.data.split()[1]} –ó–∞–≤–µ—Ä—à–µ–Ω!')
        complete_order(callback.data.split()[1])
    elif callback.data.split()[0] == '--':
        await callback.answer(f'üü• –ó–∞–∫–∞–∑ ‚Ññ{callback.data.split()[1]} –£–¥–∞–ª–µ–Ω!')
        remove_order(callback.data.split()[1])


# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
@ dp.message_handler(commands=['–ó–∞–∫—Ä—ã—Ç—å_—Å–º–µ–Ω—É'])
async def end_session(message: types.Message):
    # –ï—Å–ª–∏ —É –º—É–∂–∏–∫–∞ —Å–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
    if worker_vefify(message.from_user.id) == True and worker_session_status(message.from_user.id) == True:
        worker_end_session(message.from_user.id)
        await message.answer(f'{message.from_user.full_name}, –ó–∞–∫—Ä—ã–ª –≤–∞—à—É —Å–º–µ–Ω—É', reply_markup=ReplyKeyboardRemove())
    # –ï—Å–ª–∏ —É –º—É–∂–∏–∫–∞ —Å–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞
    elif worker_vefify(message.from_user.id) == True and worker_session_status(message.from_user.id) == False:
        await message.answer(f'<strong>–í—ã —É–∂–µ –∑–∞–∫—Ä—ã–ª–∏ —Å–º–µ–Ω—É!</strong>\n–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª–∏ —Å–º–µ–Ω—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!', reply_markup=ReplyKeyboardRemove(), parse_mode='html')


# –ó–ê–ü–£–°–ö
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup())
